{"collection":{"info":{"_postman_id":"576563f6-0862-44c8-8519-1d5342f43643","name":"reqres_collection","description":"API test suite for ReqRes public API, demonstrating CRUD, auth flow, chaining, and negative testing.","schema":"https://schema.getpostman.com/json/collection/v2.1.0/collection.json","updatedAt":"2025-09-09T18:29:14.000Z","createdAt":"2025-09-06T04:11:24.000Z","lastUpdatedBy":"18500241","uid":"18500241-576563f6-0862-44c8-8519-1d5342f43643"},"item":[{"name":"Get Endpoints","item":[{"name":"List Default Users","event":[{"listen":"test","script":{"id":"470d0dae-f779-4b43-9211-5f4cce11ad78","exec":["pm.test(\"Status is 200\", () => {","    console.log(\"Status Code:\", pm.response.code);","    pm.response.to.have.status(200);","});","","let responseData = pm.response.json();","console.log(\"Full Response Body:\", responseData);","","pm.test(\"Has at least 1 user\", () => {","    console.log(\"User count:\", responseData.data.length);","    pm.expect(responseData.data.length).to.be.above(0);","});","","pm.test(\"per_page is a positive number\", () => {","    console.log(\"per_page value:\", responseData.per_page);","    pm.expect(responseData.per_page).to.be.a('number').and.to.be.above(0);","});","","pm.test(\"total is a number\", () => {","    console.log(\"total value:\", responseData.total);","    pm.expect(responseData.total).to.be.a('number');","});","","pm.test(\"total_pages is a number\", () => {","    console.log(\"total_pages value:\", responseData.total_pages);","    pm.expect(responseData.total_pages).to.be.a('number');","});",""],"type":"text/javascript","packages":{}}},{"listen":"prerequest","script":{"id":"13d3c7fc-b7b7-47d6-8596-761c4f38b886","exec":[""],"type":"text/javascript","packages":{}}}],"id":"5486e28f-9174-4dc0-9ee8-4981c69129a9","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"GET","header":[{"key":"x-api-key","value":"{{x-api-key}}","type":"text"}],"url":{"raw":"{{baseURL}}/users","host":["{{baseURL}}"],"path":["users"]},"description":"This is used to get the default users"},"response":[],"uid":"18500241-5486e28f-9174-4dc0-9ee8-4981c69129a9"},{"name":"List Users According to valid page","event":[{"listen":"test","script":{"id":"470d0dae-f779-4b43-9211-5f4cce11ad78","exec":["//Status code check","pm.test(\"Status is 200\", () => {","    console.log(\"Status Code:\", pm.response.code);","    pm.response.to.have.status(200);","});","","// Parse JSON once","let responseData = pm.response.json();","console.log(\"Full Response Body:\", responseData);","","//At least 1 user check","pm.test(\"Has at least 1 user\", () => {","    console.log(\"User count in response:\", responseData.data.length);","    pm.expect(responseData.data.length).to.be.above(0);","});","","//Page number matches requested","let requestedPage = parseInt(pm.request.url.query.get(\"page\"));","pm.test(`Page number matches requested (${requestedPage})`, () => {","    console.log(\"Requested page:\", requestedPage);","    console.log(\"Page in response:\", responseData.page);","    pm.expect(responseData.page).to.eql(requestedPage);","});",""],"type":"text/javascript","packages":{}}}],"id":"cc15f30b-8ab1-4efb-8776-ccbb052b0d93","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"GET","header":[{"key":"x-api-key","value":"{{x-api-key}}","type":"text"}],"url":{"raw":"{{baseURL}}/users?page=2","host":["{{baseURL}}"],"path":["users"],"query":[{"key":"page","value":"2"}]},"description":"This is used to get the users accordign to the page"},"response":[],"uid":"18500241-cc15f30b-8ab1-4efb-8776-ccbb052b0d93"},{"name":"List Users According to invalid page","event":[{"listen":"test","script":{"id":"470d0dae-f779-4b43-9211-5f4cce11ad78","exec":["//Status code check","pm.test(\"Status is 200\", () => {","    console.log(\"Status Code:\", pm.response.code);","    pm.response.to.have.status(200);","});","","// Get expected page number from environment","let expectedPage = parseInt(pm.environment.get(\"invalid_page_number\"));","console.log(\"Expected Page (from environment):\", expectedPage);","","// Parse JSON response","let response = pm.response.json();","console.log(\"Full Response Body:\", response);","","//Page number matches","pm.test(\"Page number should match the one set in pre-script\", () => {","    console.log(\"Page in response:\", response.page);","    pm.expect(response.page).to.eql(expectedPage);","});","","//Data is empty","pm.test(\"Data should be empty\", () => {","    console.log(\"Data array length:\", response.data.length);","    pm.expect(response.data).to.be.an(\"array\").that.is.empty;","});",""],"type":"text/javascript","packages":{}}},{"listen":"prerequest","script":{"id":"2755b099-b979-43dc-98b9-45905956deb8","exec":["// Generate a random page number greater than 2\r","let invalid_page_number = Math.floor(Math.random() * 10) + 3;\r","\r","// Set it as an environment variable\r","pm.environment.set(\"invalid_page_number\", invalid_page_number);\r",""],"type":"text/javascript","packages":{}}}],"id":"9d10f798-a8cc-40bc-b812-1249de697c30","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"GET","header":[{"key":"x-api-key","value":"{{x-api-key}}","type":"text"}],"url":{"raw":"{{baseURL}}/users?page={{invalid_page_number}}","host":["{{baseURL}}"],"path":["users"],"query":[{"key":"page","value":"{{invalid_page_number}}"}]},"description":"This is used to get the user with invalid page"},"response":[],"uid":"18500241-9d10f798-a8cc-40bc-b812-1249de697c30"},{"name":"List Resource","event":[{"listen":"test","script":{"id":"470d0dae-f779-4b43-9211-5f4cce11ad78","exec":["//Status code check","pm.test(\"Status is 200\", () => {","    console.log(\"Status Code:\", pm.response.code);","    pm.response.to.have.status(200);","});","","// Parse JSON once","let responseData = pm.response.json();","console.log(\"Full Response Body:\", responseData);","","//At least 1 user check","pm.test(\"Has at least 1 user\", () => {","    console.log(\"User count in response:\", responseData.data.length);","    pm.expect(responseData.data.length).to.be.above(0);","});","","// Get all IDs from the \"data\" list","let allIds = responseData.data.map(x => x.id);","console.log(\"All User IDs:\", allIds);","","// Choose one ID at random","let randomId = allIds[Math.floor(Math.random() * allIds.length)];","console.log(\"Randomly selected User ID:\", randomId);","","// Save it as \"resource_id\" for later requests","pm.environment.set(\"resource_id\", randomId);","console.log(`Saved 'resource_id' in environment: ${randomId}`);",""],"type":"text/javascript","packages":{}}}],"id":"1a65aa33-2d40-442c-8ef9-9203c7995c86","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"GET","header":[{"key":"x-api-key","value":"{{x-api-key}}","type":"text"}],"url":{"raw":"{{baseURL}}/unknown","host":["{{baseURL}}"],"path":["unknown"],"query":[{"key":"page","value":"2","disabled":true}]},"description":"This is used to list the resources"},"response":[],"uid":"18500241-1a65aa33-2d40-442c-8ef9-9203c7995c86"},{"name":"Get Resource Using ResourceId","event":[{"listen":"test","script":{"id":"470d0dae-f779-4b43-9211-5f4cce11ad78","exec":["//Status code check","pm.test(\"Status is 200\", () => {","    console.log(\"Status Code:\", pm.response.code);","    pm.response.to.have.status(200);","});","","// Parse JSON response","let jsonData = pm.response.json();","console.log(\"Full Response Body:\", jsonData);","","//'data' field presence check","pm.test(\"'data' field is present\", () => {","    console.log(\"'data' field value:\", jsonData.data);","    pm.expect(jsonData.data, \"'data' should not be null\").to.not.be.null;","    pm.expect(jsonData.data, \"'data' should not be undefined\").to.not.be.undefined;","});","","//'id' inside 'data' presence check","pm.test(\"'id' inside 'data' is present\", () => {","    console.log(\"'id' value inside 'data':\", jsonData.data.id);","    pm.expect(jsonData.data.id, \"'id' should not be null\").to.not.be.null;","    pm.expect(jsonData.data.id, \"'id' should not be undefined\").to.not.be.undefined;","});","","//'id' matches stored resourceId","let storedResourceId = pm.environment.get(\"resource_id\");","pm.test(`'id' matches stored resourceId (${storedResourceId})`, () => {","    console.log(\"Stored resource_id:\", storedResourceId);","    console.log(\"Response 'id':\", jsonData.data.id);","    pm.expect(jsonData.data.id).to.eql(parseInt(storedResourceId));","});",""],"type":"text/javascript","packages":{}}},{"listen":"prerequest","script":{"packages":{},"type":"text/javascript"}}],"id":"d06ed985-5608-46c7-a078-6a7076f5bfd8","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"GET","header":[{"key":"x-api-key","value":"{{x-api-key}}","type":"text"}],"url":{"raw":"{{baseURL}}/unknown/{{resource_id}}","host":["{{baseURL}}"],"path":["unknown","{{resource_id}}"]},"description":"This is used to get the resource using valid resourceId"},"response":[],"uid":"18500241-d06ed985-5608-46c7-a078-6a7076f5bfd8"},{"name":"Get Resource Using Invalid ResourceId","event":[{"listen":"test","script":{"id":"470d0dae-f779-4b43-9211-5f4cce11ad78","exec":["//Status code check","pm.test(\"Status is 404\", () => {","    console.log(\"Status Code:\", pm.response.code);","    pm.response.to.have.status(404);","});","","// Parse JSON response","let jsonData = pm.response.json();","console.log(\"Full Response Body:\", jsonData);","","//Response is empty check","pm.test(\"Response body is empty\", () => {","    pm.expect(jsonData, \"Expected response body to be empty\").to.be.empty;","});"],"type":"text/javascript","packages":{}}},{"listen":"prerequest","script":{"id":"a794eacd-21a7-451f-991d-24351ac2cef5","exec":["// Generate a random number greater than 12\r","let invalidResourceId = Math.floor(Math.random() * 10) + 13;\r","\r","// Set it as an environment variable\r","pm.environment.set(\"invalid_resource_id\", invalidResourceId);"],"type":"text/javascript","packages":{}}}],"id":"de01c1f2-da94-43b1-b5bc-b9cf7a926946","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"GET","header":[{"key":"x-api-key","value":"{{x-api-key}}","type":"text"}],"url":{"raw":"{{baseURL}}/unknown/{{invalid_resource_id}}","host":["{{baseURL}}"],"path":["unknown","{{invalid_resource_id}}"]},"description":"This is used to get the resource using invalid resourceId"},"response":[],"uid":"18500241-de01c1f2-da94-43b1-b5bc-b9cf7a926946"}],"id":"f4eeca43-e588-4b5e-8745-fc351ed5759a","description":"This endpoint is to get the list of users and resources and their difference variations","uid":"18500241-f4eeca43-e588-4b5e-8745-fc351ed5759a"},{"name":"Auth Flow","item":[{"name":"Register User","event":[{"listen":"test","script":{"id":"4b809557-3d9e-435d-9f63-da707118e117","exec":["//Status code check","pm.test(\"Status is 200\", () => {","    console.log(\"Status Code:\", pm.response.code);","    pm.response.to.have.status(200);","});","","// Parse JSON response","let res = pm.response.json();","console.log(\"Full Response Body:\", res);","","//Token presence check","pm.test(\"Token is present in response\", () => {","    pm.expect(res.token, \"Token should not be null or undefined\").to.exist;","});","","// Save token to environment","pm.environment.set(\"token\", res.token);","console.log(`Token stored in environment: ${res.token}`);",""],"type":"text/javascript","packages":{}}},{"listen":"prerequest","script":{"id":"5c368dff-6cb4-4052-8b06-4dfb92abbaa3","exec":["if (pm.environment.get(\"baseURL\") !== \"https://reqres.in/api\") {\r","    throw new Error(`Wrong baseURL: ${pm.environment.get(\"baseURL\")}. Please select ReqRes_QA environment.`);\r","}\r",""],"type":"text/javascript","packages":{}}}],"id":"032adbb9-3ed9-4b6f-a3bd-a4de2a019e4f","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"auth":{"type":"noauth"},"method":"POST","header":[{"key":"Content-Type","value":"application/json"},{"key":"x-api-key","value":"{{x-api-key}}","type":"text"}],"body":{"mode":"raw","raw":"{\n \n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\"\n}"},"url":{"raw":"{{baseURL}}/register","host":["{{baseURL}}"],"path":["register"]},"description":"This is used to register the user profile"},"response":[],"uid":"18500241-032adbb9-3ed9-4b6f-a3bd-a4de2a019e4f"},{"name":"Register Without Username","event":[{"listen":"test","script":{"id":"1d337359-6860-4f77-84df-380e5617248f","exec":["//Status code check","pm.test(\"Status is 400\", () => {","    console.log(\"Status Code:\", pm.response.code);","    pm.response.to.have.status(400);","});","","// Parse JSON response","let res = pm.response.json();","console.log(\"Full Response Body:\", res);","","//Error message presence check","pm.test(\"Error message present\", () => {","    pm.expect(res.error, \"Error field should exist\").to.exist;","    console.log(\"Error message:\", res.error);","    pm.expect(res.error).to.include(\"Missing\");","});",""],"type":"text/javascript","packages":{}}}],"id":"3f8b33ce-d343-4048-a05f-37a09117c966","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"POST","header":[{"key":"Content-Type","value":"application/json"},{"key":"x-api-key","value":"{{x-api-key}}","type":"text"}],"body":{"mode":"raw","raw":"{\n  \"password\": \"{{password}}\"\n}"},"url":{"raw":"{{baseURL}}/register","host":["{{baseURL}}"],"path":["register"]},"description":"This is used to register without username"},"response":[],"uid":"18500241-3f8b33ce-d343-4048-a05f-37a09117c966"},{"name":"Register Without Password","event":[{"listen":"test","script":{"id":"1d337359-6860-4f77-84df-380e5617248f","exec":["//Status code check","pm.test(\"Status is 400\", () => {","    console.log(\"Status Code:\", pm.response.code);","    pm.response.to.have.status(400);","});","","// Parse JSON response","let res = pm.response.json();","console.log(\"Full Response Body:\", res);","","//Error message presence and content check","pm.test(\"Error message present\", () => {","    pm.expect(res.error, \"Error field should exist\").to.exist;","    console.log(\"Error message:\", res.error);","    pm.expect(res.error).to.include(\"Missing\");","});"],"type":"text/javascript","packages":{}}}],"id":"b1408ee7-692e-47c5-9c44-81b4c398878b","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"POST","header":[{"key":"Content-Type","value":"application/json"},{"key":"x-api-key","value":"{{x-api-key}}","type":"text"}],"body":{"mode":"raw","raw":"{\n  \"email\": \"{{email}}\"\n}"},"url":{"raw":"{{baseURL}}/register","host":["{{baseURL}}"],"path":["register"]},"description":"This is used to register without password"},"response":[],"uid":"18500241-b1408ee7-692e-47c5-9c44-81b4c398878b"},{"name":"Login User","event":[{"listen":"test","script":{"id":"4ae091d7-dcbf-4168-9607-b592f22fd5d7","exec":["//Status code check","pm.test(\"Status is 200\", () => {","    console.log(\"Status Code:\", pm.response.code);","    pm.response.to.have.status(200);","});","","// Parse JSON response","let res = pm.response.json();","console.log(\"Full Response Body:\", res);","","//Token existence check","pm.test(\"Token field exists\", () => {","    pm.expect(res.token, \"Token field should exist in response\").to.exist;","});","","//Token is not empty","pm.test(\"Token is not empty\", () => {","    console.log(\"Token value:\", res.token);","    pm.expect(res.token, \"Token should not be empty\").to.not.be.empty;","});","","// Save token to environment","pm.environment.set(\"token\", res.token);","console.log(`Token stored in environment: ${res.token}`);",""],"type":"text/javascript","packages":{}}}],"id":"b711792e-745f-4d54-b018-68a39c1d1e30","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"POST","header":[{"key":"Content-Type","value":"application/json"},{"key":"x-api-key","value":"{{x-api-key}}","type":"text"}],"body":{"mode":"raw","raw":"{\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\"\n}"},"url":{"raw":"{{baseURL}}/login","host":["{{baseURL}}"],"path":["login"]},"description":"This is used to login the user"},"response":[],"uid":"18500241-b711792e-745f-4d54-b018-68a39c1d1e30"},{"name":"Login Without Username","event":[{"listen":"test","script":{"id":"1d337359-6860-4f77-84df-380e5617248f","exec":["//Status code check","pm.test(\"Status is 400\", () => {","    console.log(\"Status Code:\", pm.response.code);","    pm.response.to.have.status(400);","});","","// Parse JSON response","let res = pm.response.json();","console.log(\"Full Response Body:\", res);","","//Error message presence and content check","pm.test(\"Error message present\", () => {","    pm.expect(res.error, \"Error field should exist\").to.exist;","    console.log(\"Error message:\", res.error);","    pm.expect(res.error.toLowerCase()).to.include(\"missing\");","});",""],"type":"text/javascript","packages":{}}}],"id":"f4e8d580-038c-41e3-a324-69305a944cf3","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"POST","header":[{"key":"Content-Type","value":"application/json"},{"key":"x-api-key","value":"{{x-api-key}}","type":"text"}],"body":{"mode":"raw","raw":"{\n  \"password\": \"{{password}}\"\n}"},"url":{"raw":"{{baseURL}}/login","host":["{{baseURL}}"],"path":["login"]},"description":"This is used to login without username"},"response":[],"uid":"18500241-f4e8d580-038c-41e3-a324-69305a944cf3"},{"name":"Login Without Password","event":[{"listen":"test","script":{"id":"1d337359-6860-4f77-84df-380e5617248f","exec":["//Status code check","pm.test(\"Status is 400\", () => {","    console.log(\"Status Code:\", pm.response.code);","    pm.response.to.have.status(400);","});","","// Parse JSON response","let res = pm.response.json();","console.log(\"Full Response Body:\", res);","","//Error message presence and content check","pm.test(\"Error message present\", () => {","    pm.expect(res.error, \"Error field should exist\").to.exist;","    console.log(\"Error message:\", res.error);","    pm.expect(res.error.toLowerCase()).to.include(\"missing\");","});",""],"type":"text/javascript","packages":{}}}],"id":"575c2740-56b9-49c4-b797-0bf43c889455","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"POST","header":[{"key":"Content-Type","value":"application/json"},{"key":"x-api-key","value":"{{x-api-key}}","type":"text"}],"body":{"mode":"raw","raw":"{\n  \"email\": \"{{email}}\"\n}"},"url":{"raw":"{{baseURL}}/login","host":["{{baseURL}}"],"path":["login"]},"description":"This is used to login without password"},"response":[],"uid":"18500241-575c2740-56b9-49c4-b797-0bf43c889455"},{"name":"Logout User","event":[{"listen":"test","script":{"id":"4ae091d7-dcbf-4168-9607-b592f22fd5d7","exec":["pm.test(\"Status is 200\", () => pm.response.to.have.status(200));","","let res = pm.response.json();","console.log(\"Full Response Body:\", res);","","//Check that the JSON is empty (works for {} or [])","pm.test(\"Response JSON is empty\", () => {","    pm.expect(res, \"Expected response to be empty\").to.be.empty;","});","",""],"type":"text/javascript","packages":{}}}],"id":"f66b44dd-7e2e-44d5-a2e0-93e391496c0d","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"POST","header":[{"key":"Content-Type","value":"application/json"},{"key":"x-api-key","value":"{{x-api-key}}","type":"text"}],"body":{"mode":"raw","raw":"{\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\"\n}"},"url":{"raw":"{{baseURL}}/logout","host":["{{baseURL}}"],"path":["logout"]},"description":"This is used to logout user"},"response":[],"uid":"18500241-f66b44dd-7e2e-44d5-a2e0-93e391496c0d"}],"id":"8edd91ad-cbca-4063-a914-ddbbfc6231ab","description":"This is used to describe the authentication flow such as register user, login and logout process.","uid":"18500241-8edd91ad-cbca-4063-a914-ddbbfc6231ab"},{"name":"CRUD Operations","item":[{"name":"Create User","event":[{"listen":"test","script":{"id":"a6ff5eee-bb72-4383-b329-e4a85e1e8fbb","exec":["//Status code check","pm.test(\"Status is 201 Created\", () => {","    console.log(\"Status Code:\", pm.response.code);","    pm.response.to.have.status(201);","});","","//Parse JSON response once","let jsonData = pm.response.json();","console.log(`User created with ID: ${jsonData.id}`);","","// Get the request body you sent","let requestBody = JSON.parse(pm.request.body.raw);","console.log(\"Request Body Sent:\", requestBody);","","//Name matches","pm.test(\"Name matches request body\", () => {","    pm.expect(jsonData.name, \"Name field should exist\").to.exist;","    pm.expect(jsonData.name).to.eql(requestBody.name);","});","","//Job matches","pm.test(\"Job matches request body\", () => {","    pm.expect(jsonData.job, \"Job field should exist\").to.exist;","    pm.expect(jsonData.job).to.eql(requestBody.job);","});","","//ID is a string containing only digits","pm.test(\"ID is a string containing only numbers\", () => {","    pm.expect(jsonData.id, \"ID field should exist\").to.exist;","    pm.expect(jsonData.id).to.be.a('string');","    pm.expect(jsonData.id).to.match(/^\\d+$/);","});",""],"type":"text/javascript","packages":{}}}],"id":"51a08a84-b2a9-48d3-a183-c611cde45566","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"POST","header":[{"key":"Content-Type","value":"application/json"},{"key":"x-api-key","value":"{{x-api-key}}","type":"text"}],"body":{"mode":"raw","raw":"{\n  \"name\": \"Mohammad\",\n  \"job\": \"QA Engineer\"\n}"},"url":{"raw":"{{baseURL}}/users","host":["{{baseURL}}"],"path":["users"]},"description":"This is used to create user"},"response":[],"uid":"18500241-51a08a84-b2a9-48d3-a183-c611cde45566"},{"name":"Create User Without Body","event":[{"listen":"test","script":{"id":"a6ff5eee-bb72-4383-b329-e4a85e1e8fbb","exec":["//Status code check","pm.test(\"Status is 400 Bad Request\", () => {","    console.log(\"Status Code:\", pm.response.code);","    pm.response.to.have.status(400);","});","","// Parse JSON response","let res = pm.response.json();","console.log(\"Full Response Body:\", res);","","//Error message check","pm.test(\"Error message is 'Empty request body'\", () => {","    pm.expect(res.error, \"Error field should exist\").to.exist;","    console.log(\"Error message:\", res.error);","    pm.expect(res.error).to.equal(\"Empty request body\");","});",""],"type":"text/javascript","packages":{}}}],"id":"ad4a0a77-1068-4e66-8c2f-ec3d6564604e","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"POST","header":[{"key":"Content-Type","value":"application/json"},{"key":"x-api-key","value":"{{x-api-key}}","type":"text"}],"url":{"raw":"{{baseURL}}/users","host":["{{baseURL}}"],"path":["users"]},"description":"This is used to create user by using empty body"},"response":[],"uid":"18500241-ad4a0a77-1068-4e66-8c2f-ec3d6564604e"},{"name":"Get Single User","event":[{"listen":"test","script":{"id":"19ee9573-42e8-41ca-9528-5c85bb4015e0","exec":["//Check status","pm.test(\"Status is 200\", () => {","    console.log(\"Status Code:\", pm.response.code);","    pm.response.to.have.status(200);","});","","// Get expected user ID from environment","let expectedUserId = parseInt(pm.environment.get(\"user_id\"));","console.log(\"Expected User ID:\", expectedUserId);","","// Parse response once","let jsonData = pm.response.json().data;","console.log(\"User Data from Response:\", jsonData);","","//Check 'data' exists","pm.test(\"'data' is present\", () => {","    pm.expect(jsonData).to.exist;","});","","//Check ID matches","pm.test(\"User ID matches expected\", () => {","    pm.expect(jsonData.id).to.eql(expectedUserId);","});","","//Check key fields are filled","pm.test(\"Email, First Name, Last Name are present\", () => {","    pm.expect(jsonData.email).to.be.a(\"string\").and.not.empty;","    pm.expect(jsonData.first_name).to.be.a(\"string\").and.not.empty;","    pm.expect(jsonData.last_name).to.be.a(\"string\").and.not.empty;","});",""],"type":"text/javascript","packages":{}}},{"listen":"prerequest","script":{"id":"d2ef2c53-b2ab-4abb-b3f6-afbf0db87682","exec":["// Generate a random user_id between 1 and 12 (inclusive)\r","let userId = Math.floor(Math.random() * 12) + 1;\r","\r","// Set it as an environment variable\r","pm.environment.set(\"user_id\", userId);\r","\r","// Optional: Log it for debugging\r","console.log(\"Random user_id set to:\", userId);\r",""],"type":"text/javascript","packages":{}}}],"id":"aec31739-19b4-4d99-9d10-9572ec688e6d","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"GET","header":[{"key":"x-api-key","value":"{{x-api-key}}","type":"text"}],"url":{"raw":"{{baseURL}}/users/{{user_id}}","host":["{{baseURL}}"],"path":["users","{{user_id}}"]},"description":"This is used to get single user"},"response":[],"uid":"18500241-aec31739-19b4-4d99-9d10-9572ec688e6d"},{"name":"Get Non-existent User","event":[{"listen":"test","script":{"id":"b3ccad44-63d7-4ecf-9ca5-bb479839548a","exec":["//Status code check\r","pm.test(\"Status is 404\", () => {\r","    console.log(\"Status Code:\", pm.response.code);\r","    pm.response.to.have.status(404);\r","});\r","\r","//Assert that JSON response is empty\r","pm.test(\"Response body is empty\", () => {\r","    let body = pm.response.json();\r","    console.log(\"Response Body:\", body);\r","    pm.expect(body, \"Expected empty object or array\").to.be.empty;\r","});\r","\r",""],"type":"text/javascript","packages":{}}},{"listen":"prerequest","script":{"id":"65e60d76-519e-4471-a2ca-db930d193e96","exec":["// Get the original user_id\r","let originalId = parseInt(pm.environment.get(\"user_id\"));\r","\r","// Add 12 to it\r","let newId = originalId + 12;\r","\r","// Save the new value as a separate variable\r","pm.environment.set(\"user_id_plus_12\", newId);\r","\r",""],"type":"text/javascript","packages":{}}}],"id":"4939e3c1-4d37-4f31-8576-54b23972f053","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"GET","header":[{"key":"x-api-key","value":"{{x-api-key}}","type":"text"}],"url":{"raw":"{{baseURL}}/users/{{user_id_plus_12}}","host":["{{baseURL}}"],"path":["users","{{user_id_plus_12}}"]},"description":"This is used to get invalid user"},"response":[],"uid":"18500241-4939e3c1-4d37-4f31-8576-54b23972f053"},{"name":"Update User","event":[{"listen":"test","script":{"id":"aaf1bc0e-8973-406f-ab35-de0b8ff7a472","exec":["//Status code check","pm.test(\"Status is 200\", () => {","    console.log(\"Status Code:\", pm.response.code);","    pm.response.to.have.status(200);","});","","// Parse JSON once","let res = pm.response.json();","console.log(\"Full Response Body:\", res);","","//Job updated check","pm.test(\"Job updated\", () => {","    console.log(\"Job in response:\", res.job);","    pm.expect(res.job).to.eql(\"QA Engineer\");","});","","//Name updated check","pm.test(\"Name updated\", () => {","    console.log(\"Name in response:\", res.name);","    pm.expect(res.name).to.eql(\"Mohammad Shahid\");","});"],"type":"text/javascript","packages":{}}}],"id":"5f41a4a0-18cb-497d-b26f-625862c2afce","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"PUT","header":[{"key":"Content-Type","value":"application/json"},{"key":"x-api-key","value":"{{x-api-key}}","type":"text"}],"body":{"mode":"raw","raw":"{\n  \"name\": \"Mohammad Shahid\",\n  \"job\": \"QA Engineer\"\n}"},"url":{"raw":"{{baseURL}}/users/{{user_id}}","host":["{{baseURL}}"],"path":["users","{{user_id}}"]},"description":"This is used to update the user"},"response":[],"uid":"18500241-5f41a4a0-18cb-497d-b26f-625862c2afce"},{"name":"Delete User","event":[{"listen":"test","script":{"id":"ced5230d-5806-4d59-8e48-bdb26c5975bc","exec":["//Status code check\r","pm.test(\"Status is 204 No Content\", () => {\r","    console.log(\"Status Code:\", pm.response.code);\r","    pm.response.to.have.status(204);\r","});\r","\r","//Body is empty check\r","pm.test(\"Body is empty\", () => {\r","    let bodyText = pm.response.text();\r","    console.log(\"Response Body (should be empty):\", bodyText);\r","    pm.expect(bodyText).to.eql('');\r","});\r","\r","\r","//Now unset all the variables:\r","// List of variable names to unset\r","let vars = [\r","    \"userId\",\r","    \"token\",\r","    \"resource_id\",\r","    \"user_id\",\r","    \"page_number\",\r","    \"invalid_resource_id\",\r","    \"invalid_page_number\",\r","    \"user_id_plus_12\"\r","];\r","\r","// Unset from environment\r","vars.forEach(v => pm.environment.unset(v));\r","\r","\r",""],"type":"text/javascript","packages":{}}}],"id":"2de73dca-c691-4a9e-b837-2096977f1829","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"DELETE","header":[{"key":"x-api-key","value":"{{x-api-key}}","type":"text"}],"url":{"raw":"{{baseURL}}/users/{{user_id}}","host":["{{baseURL}}"],"path":["users","{{user_id}}"]},"description":"This is used to delete the user"},"response":[],"uid":"18500241-2de73dca-c691-4a9e-b837-2096977f1829"}],"id":"a390bb51-a5bd-4819-a901-bf1c921adc49","description":"This is used to perform crud operation (create, read(get), update and delete)","uid":"18500241-a390bb51-a5bd-4819-a901-bf1c921adc49"}]}}